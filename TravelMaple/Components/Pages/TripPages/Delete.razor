@page "/trips/delete"
@using Microsoft.EntityFrameworkCore
@using TravelMaple.Domain
@inject IDbContextFactory<TravelMaple.Data.TravelMapleContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Trip</h2>
    <hr />
    @if (trip is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@trip.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Duration (days)</dt>
            <dd class="col-sm-10">@trip.Duration</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Destination</dt>
            <dd class="col-sm-10">@trip.Destination</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Estimated Budget</dt>
            <dd class="col-sm-10">@trip.EstBudget</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Start Date</dt>
            <dd class="col-sm-10">@trip.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">End Date</dt>
            <dd class="col-sm-10">@trip.EndDate</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Aim</dt>
            <dd class="col-sm-10">@trip.Aim</dd>
        </dl>
        <EditForm method="post" Model="trip" OnValidSubmit="DeleteTrip" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(trip is null)">Delete</button> |
            <a href="/trips">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Trip? trip;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        trip = await context.Trip.FirstOrDefaultAsync(m => m.Id == Id);

        if (trip is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteTrip()
    {
        using var context = DbFactory.CreateDbContext();
        context.Trip.Remove(trip!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/trips");
    }
}
