@page "/feedbacks"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TravelMaple.Domain
@using TravelMaple.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TravelMaple.Data.TravelMapleContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Index</PageTitle>

<h1>User Feedbacks</h1>

<QuickGrid Class="table" Items="context.Feedback">
    <PropertyColumn Property="feedback => feedback.Rating" />
    <PropertyColumn Property="feedback => feedback.Reason" />
    <PropertyColumn Property="feedback => feedback.DateCreated" />
    <PropertyColumn Property="feedback => feedback.DateUpdated" />
    <PropertyColumn Property="feedback => feedback.CreatedBy" />
    <PropertyColumn Property="feedback => feedback.UpdatedBy" />

    <TemplateColumn Context="feedback">
        <a href="@($"feedbacks/edit?id={feedback.Id}")">Edit</a> |
        <a href="@($"feedbacks/details?id={feedback.Id}")">Details</a> |
        <a href="@($"feedbacks/delete?id={feedback.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private TravelMapleContext context = default!;

    @inject AuthenticationStateProvider authenticationStateProvider

    

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    private string userId = string.Empty;
    private bool isAdmin = false;
    @inject AuthenticationStateProvider authenticationStateProvider
    // Filter bookings by userId
    private IQueryable<Feedback> FilteredBookings => isAdmin
    ? context.Feedback // Admins can see all bookings
    : context.Feedback.Where(e => e.CreatedBy == userId); // Regular users see only their own feedback???


    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");

        context = DbFactory.CreateDbContext();
    }

}
